image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
    - build
    - test
    - security
    - deploy

variables:
    # Specify where to store NuGet packages, for downloading dependencies during build
    NUGET_PACKAGES: "$CI_PROJECT_DIR/.nuget/packages"

# Cache downloaded NuGet packages
cache:
    paths:
        - .nuget/packages/

build_job:
    stage: build
    script:
        - echo "Building project..."
        - dotnet build
    artifacts: # Preserve build outputs for future use
        paths:
            - bin/
    resource_group: common
    rules:
        - if: '$CI_MERGE_REQUEST_ID'

test_job:
    stage: test
    services:
        # DinD service is required for Testcontainers
        - name: docker:dind
          command: ["--tls=false"]
    variables:
        # Set environment to Staging, so that Testcontainers will be used
        ASPNETCORE_ENVIRONMENT: "Staging"
        # Instruct Docker to use the DinD daemon
        DOCKER_HOST: "tcp://docker:2375"
        # Instruct Docker not to start over TLS
        DOCKER_TLS_CERTDIR: ""
        # Improve performance with overlayfs
        DOCKER_DRIVER: overlay2
    script:
        - echo "Running test suite..."
        - dotnet test --logger:trx --results-directory TestResults
    artifacts:
        when: always
        reports:
            junit: TestResults/*.trx
    dependencies:
        - build_job # test_job depends on artifacts produced by build_job (avoids rebuilding the project)
    resource_group: common
    rules:
        - if: '$CI_MERGE_REQUEST_ID'

# This doesn't cause the pipeline to fail if a vulnerability is found, but vulnerabilities do get printed
dependency_scanning:
    stage: security
    script:
    - echo "Running dependency scanning..."
    - dotnet restore
    - dotnet list package --vulnerable
    resource_group: common
    rules:
        - if: '$CI_MERGE_REQUEST_ID'
          
deploy_job:
    stage: deploy
    image: ubuntu:latest
    only:
        - dev
    before_script:
        # Install open-ssh client
        - apt-get update -y && apt-get install openssh-client -y
        # Start ssh-agent
        - eval $(ssh-agent -s)
        # Add the private key to ssh-agent
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    script:
        # Connect to the EC2 instance using SSH
        # The container is ephemeral, so disabling StrictHostKeyChecking isn't really a big deal
        - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST 'sh deploy.sh'
    resource_group: common
    variables:
        # Don't pull the repository for this job
        GIT_STRATEGY: none
