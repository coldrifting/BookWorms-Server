stages:
    - exp
    - build
    - test
    - security
    - prepare
    - deploy-image
    - release

variables:
    DOTNET_VERSION: "8.0"


# EXPERIMENT
experiment:
    stage: exp
    script:
        |
        echo "Original: $CI_REGISTRY"
        REGISTRY_NO_PORT=$(echo $CI_REGISTRY | cut -d':' -f1)
        echo "Without port: $REGISTRY_NO_PORT"


# When Merge Request is opened

build_job:
    rules:
        - if: '$CI_MERGE_REQUEST_ID'
    stage: build
    image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
    script:
        - echo "Building project..."
        - dotnet build
    artifacts: # Preserve build outputs for future use
        paths:
            - bin/
        expire_in: 1 week
    resource_group: common

test_job:
    rules:
        - if: '$CI_MERGE_REQUEST_ID'
    stage: test
    image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
    services:
        # DinD service is required for Testcontainers
        - name: docker:dind
          command: ["--tls=false"]
    variables:
        # Set environment to Staging, so that Testcontainers will be used
        ASPNETCORE_ENVIRONMENT: "Staging"
        # Instruct Docker to use the DinD daemon
        DOCKER_HOST: "tcp://docker:2375"
        # Instruct Docker not to start over TLS
        DOCKER_TLS_CERTDIR: ""
        # Improve performance with overlayfs
        DOCKER_DRIVER: overlay2
    script:
        - echo "Running test suite..."
        - dotnet test --logger "console;verbosity=normal" --logger "trx"
    artifacts:
        when: always
        reports:
            junit: Bookworms-Server-Testing/TestResults/*.trx
        expire_in: 1 month
    dependencies:
        - build_job # test_job depends on artifacts produced by build_job (avoids rebuilding the project)
    resource_group: common

# This doesn't cause the pipeline to fail if a vulnerability is found, but vulnerabilities do get printed
dependency_scanning:
    rules:
        - if: '$CI_MERGE_REQUEST_ID'
    stage: security
    image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
    script:
        - echo "Running dependency scanning..."
        - dotnet restore
        - dotnet list package --vulnerable
    resource_group: common



# When "trigger-deploy" is included in the commit message

construct_tag_job:
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /trigger-deploy/
    stage: prepare
    image: alpine:latest
    before_script:
        - apk add --no-cache git
    script:
        |
        START_DATE="2025-01-09"
        CURRENT_DATE=$(date +%Y-%m-%d)
        SECONDS_DIFF=$(( $(date -d "$CURRENT_DATE" +%s) - $(date -d "$START_DATE" +%s) ))
        WEEK_NUMBER=$(( SECONDS_DIFF / 604800 + 1 ))
        MARCH_10TH="2025-03-10"
        MARCH_17TH="2025-03-17"
        if [ $(date -d "$CURRENT_DATE" +%s) -ge $(date -d "$MARCH_10TH" +%s) ] && [ $(date -d "$CURRENT_DATE" +%s) -lt $(date -d "$MARCH_17TH" +%s) ]; then
            WEEK_NUMBER="9A"
        elif [ $(date -d "$CURRENT_DATE" +%s) -ge $(date -d "$MARCH_17TH" +%s) ]; then
            WEEK_NUMBER=$(( WEEK_NUMBER + 1 ))
        fi
        LATEST_TAG=$(git tag -l "v0.$WEEK_NUMBER.*" | sort -V | tail -n 1)
        if [ -z "$LATEST_TAG" ]; then
            HOTFIX_NUMBER=0
        else
            HOTFIX_NUMBER=$(( ${LATEST_TAG##*.} + 1 ))
        fi
        RELEASE_TAG="0.$WEEK_NUMBER.$HOTFIX_NUMBER"
        echo "TAG=$RELEASE_TAG" >> variables.env
    artifacts:
        reports:
            dotenv: variables.env
    resource_group: common

build_and_deploy_image_job:
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /trigger-deploy/
    stage: deploy-image
    image: docker:stable
    dependencies:
        - construct_tag_job
    services:
        - name: docker:dind
          command: ["--tls=false"]
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
        DOCKER_DRIVER: overlay2
    before_script:
        - |
          # Install open-ssh client
          apk add --no-cache openssh-client
          # Start ssh-agent
          eval $(ssh-agent -s)
          # Add the private key to ssh-agent
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -q -
    script:
        - |
          # Build a new image with the constructed tag
          docker build -t bookworms-server:$TAG .
          # Load the new image into the EC2 instance's Docker process
          docker save bookworms-server:$TAG | ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST sudo docker load
          # Restart the server service
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<- EOF
            sudo systemctl restart bookworms.service
            # Prune any images older than 1 hour
            sudo docker image prune -a --force --filter 'until=1h'
          EOF
    resource_group: common

release_job:
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /trigger-deploy/
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    dependencies:
        - construct_tag_job
    script:
        - echo "Creating GitLab release with tag v$TAG"
    release:
        name: "Release $TAG"
        description: "Created using the release CLI"
        tag_name: "v$TAG"
        ref: "$CI_COMMIT_SHA"
    resource_group: common
