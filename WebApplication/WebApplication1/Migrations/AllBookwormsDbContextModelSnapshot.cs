// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AllBookwormsDbContext))]
    partial class AllBookwormsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Entities.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Bookshelf", b =>
                {
                    b.Property<Guid>("BookshelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("BookshelfId");

                    b.ToTable("Bookshelfs");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfBook", b =>
                {
                    b.Property<Guid>("BookshelfId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookshelfId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookshelfBooks");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfChild", b =>
                {
                    b.Property<Guid>("BookshelfId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookshelfId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("BookshelfChildren");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfClassroom", b =>
                {
                    b.Property<Guid>("BookshelfId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClassroomCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("BookshelfId", "ClassroomCode");

                    b.HasIndex("ClassroomCode");

                    b.ToTable("BookshelfClassrooms");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Child", b =>
                {
                    b.Property<Guid>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClassroomCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ParentUsername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ReadingLevel")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("ChildId");

                    b.HasIndex("ClassroomCode");

                    b.HasIndex("ParentUsername");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Classroom", b =>
                {
                    b.Property<string>("ClassroomCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("ClassroomCode");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Completed", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ChildId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Completeds");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Parent", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Username");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Reading", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.HasKey("ChildId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("Username");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Teacher", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ClassroomCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Username");

                    b.HasIndex("ClassroomCode")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfBook", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Book", "Book")
                        .WithMany("Bookshelves")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Bookshelf", "Bookshelf")
                        .WithMany("Books")
                        .HasForeignKey("BookshelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Bookshelf");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfChild", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Bookshelf", "Bookshelf")
                        .WithMany("ChildBookshelves")
                        .HasForeignKey("BookshelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Child", "Child")
                        .WithMany("Bookshelves")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookshelf");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.BookshelfClassroom", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Bookshelf", "Bookshelf")
                        .WithMany("ClassroomBookshelves")
                        .HasForeignKey("BookshelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Classroom", "Classroom")
                        .WithMany("BookshelfClassrooms")
                        .HasForeignKey("ClassroomCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookshelf");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Child", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Classroom", "Classroom")
                        .WithMany("Children")
                        .HasForeignKey("ClassroomCode");

                    b.HasOne("WebApplication1.Models.Entities.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Completed", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Book", "Book")
                        .WithMany("Completeds")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Child", "Child")
                        .WithMany("Completed")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Parent", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.User", "User")
                        .WithOne("Parent")
                        .HasForeignKey("WebApplication1.Models.Entities.Parent", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Reading", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Book", "Book")
                        .WithMany("Readings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.Child", "Child")
                        .WithMany("Reading")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Review", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Teacher", b =>
                {
                    b.HasOne("WebApplication1.Models.Entities.Classroom", "Classroom")
                        .WithOne("Teacher")
                        .HasForeignKey("WebApplication1.Models.Entities.Teacher", "ClassroomCode");

                    b.HasOne("WebApplication1.Models.Entities.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("WebApplication1.Models.Entities.Teacher", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Book", b =>
                {
                    b.Navigation("Bookshelves");

                    b.Navigation("Completeds");

                    b.Navigation("Readings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Bookshelf", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("ChildBookshelves");

                    b.Navigation("ClassroomBookshelves");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Child", b =>
                {
                    b.Navigation("Bookshelves");

                    b.Navigation("Completed");

                    b.Navigation("Reading");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Classroom", b =>
                {
                    b.Navigation("BookshelfClassrooms");

                    b.Navigation("Children");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("WebApplication1.Models.Entities.User", b =>
                {
                    b.Navigation("Parent");

                    b.Navigation("Reviews");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
